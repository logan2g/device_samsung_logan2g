diff --git a/audio/AudioPolicyManagerBase.cpp b/audio/AudioPolicyManagerBase.cpp
index bb19830..f541180 100644
--- a/audio/AudioPolicyManagerBase.cpp
+++ b/audio/AudioPolicyManagerBase.cpp
@@ -17,9 +17,9 @@
  */
 
 #define LOG_TAG "AudioPolicyManagerBase"
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
-//#define VERY_VERBOSE_LOGGING
+#define VERY_VERBOSE_LOGGING
 #ifdef VERY_VERBOSE_LOGGING
 #define ALOGVV ALOGV
 #else
@@ -39,6 +39,9 @@
 #include <hardware/audio.h>
 #include <math.h>
 #include <hardware_legacy/audio_policy_conf.h>
+#include <pthread.h>
+#include <stdlib.h>
+#include <fcntl.h>
 #include <cutils/properties.h>
 
 namespace android_audio_legacy {
@@ -47,11 +50,114 @@ namespace android_audio_legacy {
 // AudioPolicyInterface implementation
 // ----------------------------------------------------------------------------
 
+#ifdef SPRD_HARDWARE
+status_t AudioPolicyManagerBase::startReadingThread()
+{
+    ALOGV("startReadingThread");
+    mDone = false;
+    pthread_attr_t attr;
+    pthread_attr_init(&attr);
+    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
+    pthread_create(&mThread, &attr, ThreadWrapper, this);
+    pthread_attr_destroy(&attr);
+    return OK;
+}
+
+void AudioPolicyManagerBase::stopReadingThread()
+{
+    ALOGV("stopReadingThread");
+    mDone = true;
+    void *dummy;
+    pthread_join(mThread, &dummy);
+}
+
+// static
+void *AudioPolicyManagerBase::ThreadWrapper(void *me) {
+    ALOGV("ThreadWrapper %p", me);
+    AudioPolicyManagerBase *mBase = static_cast<AudioPolicyManagerBase *>(me);
+    mBase->threadFunc();
+    return NULL;
+}
+
+void AudioPolicyManagerBase::threadFunc() {
+    ALOGV("threadFunc in");
+    int preValue = 0;
+    uint32_t savedDevices;
+    // add for bug158794 start
+    char bootvalue[PROPERTY_VALUE_MAX];
+    audio_devices_t wiredHeadDevice = (audio_devices_t)(AUDIO_DEVICE_OUT_WIRED_HEADSET
+        | AUDIO_DEVICE_OUT_WIRED_HEADPHONE);
+    savedDevices = mAvailableOutputDevices & wiredHeadDevice;
+    while (!mDone) {
+        property_get("sys.boot_completed", bootvalue, "");
+        if (strncmp("1", bootvalue, 1) == 0) {
+            mDone = true;
+            break;
+        }
+    // add for bug158749 end
+
+        char buf[12] = {'\0'};
+        const char* headsetStatePath = "/sys/class/switch/h2w/state";
+        int fd = open(headsetStatePath,O_RDONLY);
+        if(fd < 0) {
+            ALOGE("open failed %s ",strerror(errno));
+        } else {
+            ssize_t mBytesRead = read(fd,(char*)buf,12);
+            close(fd);
+            if(mBytesRead>0) {
+                int value = atoi((char*)buf);
+                if (value != preValue) {
+                    preValue = value;
+                    ALOGD("headsets type = %s",(char*)buf);
+                    switch (value) {
+                    case 0:
+                        mAvailableOutputDevices = (audio_devices_t)(mAvailableOutputDevices & ~wiredHeadDevice);
+                        break;
+                    case 1:
+                        mAvailableOutputDevices = (audio_devices_t)(mAvailableOutputDevices | AUDIO_DEVICE_OUT_WIRED_HEADSET);
+                        break;
+                    case 2:
+                        mAvailableOutputDevices = (audio_devices_t)(mAvailableOutputDevices | AUDIO_DEVICE_OUT_WIRED_HEADPHONE);
+                        break;
+                    default:
+                        usleep(100*1000);
+                        continue;
+                    }
+                    audio_devices_t device = getNewDevice(mPrimaryOutput, false);
+                    AudioOutputDescriptor *hwOutputDesc = mOutputs.valueFor(mPrimaryOutput);
+                    hwOutputDesc->mDevice = device;
+                    AudioParameter param = AudioParameter();
+                    param.addInt(String8(AudioParameter::keyRouting), (int)device);
+                    mpClientInterface->setParameters(mPrimaryOutput, param.toString());
+                    //modify for 159050  begin
+                    checkAndSetVolume(AudioSystem::SYSTEM, mStreams[AudioSystem::SYSTEM].getVolumeIndex(device),
+                            mPrimaryOutput,   device, 0,  false);
+                    checkAndSetVolume(AudioSystem::ALARM, mStreams[AudioSystem::ALARM].getVolumeIndex(device),
+                            mPrimaryOutput,   device, 0,  false);
+                     //modify for 159505 end
+                }
+            }
+        }
+        usleep(100*1000);
+    }
+    //mAvailableOutputDevices = (audio_devices_t)(savedDevices | (mAvailableOutputDevices & ~wiredHeadDevice));
+    ALOGV("threadFunc exit");
+    // add for bug158794 start
+    void *temp;
+    pthread_exit(temp);
+    // add for bug 158749 end
+    return;
+}
+#endif
 
 status_t AudioPolicyManagerBase::setDeviceConnectionState(audio_devices_t device,
                                                   AudioSystem::device_connection_state state,
                                                   const char *device_address)
 {
+#ifdef SPRD_HARDWARE
+    bool force4fm = false;
+#endif
+
     SortedVector <audio_io_handle_t> outputs;
 
     ALOGV("setDeviceConnectionState() device: %x, state %d, address %s", device, state, device_address);
@@ -98,6 +204,15 @@ status_t AudioPolicyManagerBase::setDeviceConnectionState(audio_devices_t device
             }
             ALOGV("setDeviceConnectionState() checkOutputsForDevice() returned %d outputs",
                   outputs.size());
+#ifdef SPRD_HARDWARE
+            if (((mPhoneState == AudioSystem::MODE_RINGTONE) ||
+                    (mPhoneState == AudioSystem::MODE_IN_CALL) ||
+                    (mPhoneState == AudioSystem::MODE_RINGTONE)) &&
+                    device & AUDIO_DEVICE_OUT_ALL_FM) {
+                ALOGE("setDeviceConnectionState() you will make a phone call, device %x returned",device);
+                return INVALID_OPERATION;
+            }
+#endif
             // register new device as available
             mAvailableOutputDevices = (audio_devices_t)(mAvailableOutputDevices | device);
 
@@ -117,6 +232,15 @@ status_t AudioPolicyManagerBase::setDeviceConnectionState(audio_devices_t device
                     // handle USB device connection
                     mUsbCardAndDevice = String8(device_address, MAX_DEVICE_ADDRESS_LEN);
                     paramStr = mUsbCardAndDevice;
+#ifdef SPRD_HARDWARE
+                } else if (device & AUDIO_DEVICE_OUT_ALL_FM) {
+                    for (size_t i = 0; i < outputs.size(); i++) {
+                        AudioOutputDescriptor *outputDesc = mOutputs.valueAt(i);
+                        if (outputDesc != NULL) {
+                            outputDesc->changeRefCount(AudioSystem::FM, 1);
+                        }
+                    }
+#endif
                 }
                 // not currently handling multiple simultaneous submixes: ignoring remote submix
                 //   case and address
@@ -149,6 +273,16 @@ status_t AudioPolicyManagerBase::setDeviceConnectionState(audio_devices_t device
             } else if (mHasUsb && audio_is_usb_device(device)) {
                 // handle USB device disconnection
                 mUsbCardAndDevice = "";
+#ifdef SPRD_HARDWARE
+            } else if (device & AUDIO_DEVICE_OUT_ALL_FM) {
+                for (size_t i = 0; i < outputs.size(); i++) {
+                    AudioOutputDescriptor *outputDesc = mOutputs.valueAt(i);
+                    if (outputDesc != NULL) {
+                        outputDesc->changeRefCount(AudioSystem::FM, -1);
+                        force4fm = true;
+                    }
+                }
+#endif
             }
             // not currently handling multiple simultaneous submixes: ignoring remote submix
             //   case and address
@@ -167,7 +301,11 @@ status_t AudioPolicyManagerBase::setDeviceConnectionState(audio_devices_t device
                 AudioOutputDescriptor *desc = mOutputs.valueFor(outputs[i]);
                 // close unused outputs after device disconnection or direct outputs that have been
                 // opened by checkOutputsForDevice() to query dynamic parameters
+#ifdef SPRD_HARDWARE
+                if ((!(device & AUDIO_DEVICE_OUT_ALL_FM) && state == AudioSystem::DEVICE_STATE_UNAVAILABLE) ||
+#else
                 if ((state == AudioSystem::DEVICE_STATE_UNAVAILABLE) ||
+#endif
                         (((desc->mFlags & AUDIO_OUTPUT_FLAG_DIRECT) != 0) &&
                          (desc->mDirectOpenCount == 0))) {
                     closeOutput(outputs[i]);
@@ -294,6 +432,15 @@ void AudioPolicyManagerBase::setPhoneState(int state)
         return;
     }
 
+#ifdef SPRD_HARDWARE
+    if ((AudioSystem::MODE_RINGTONE == state) && (mAvailableOutputDevices & AUDIO_DEVICE_OUT_FM_HEADSET)) {
+        ALOGW("setPhoneState() close FM before you make a phone call.");
+        setDeviceConnectionState(AUDIO_DEVICE_OUT_FM_HEADSET,
+                        AudioSystem::DEVICE_STATE_UNAVAILABLE, "0"); /* XXX */
+
+    }
+#endif
+
     // if leaving call state, handle special case of active streams
     // pertaining to sonification strategy see handleIncallSonification()
     if (isInCall()) {
@@ -334,10 +481,13 @@ void AudioPolicyManagerBase::setPhoneState(int state)
         force = true;
     }
 
-    // check for device and output changes triggered by new phone state
-    newDevice = getNewDevice(mPrimaryOutput, false /*fromCache*/);
     checkA2dpSuspend();
     checkOutputForAllStrategies();
+    // check for device and output changes triggered by new phone state
+    // note that getNewDevice should be done after checkA2dpSuspend,
+    // because music will resume playing from speaker after end call, please refer to 129459
+    newDevice = getNewDevice(mPrimaryOutput, false /*fromCache*/);
+
     updateDevicesAndOutputs();
 
     AudioOutputDescriptor *hwOutputDesc = mOutputs.valueFor(mPrimaryOutput);
@@ -377,7 +527,7 @@ void AudioPolicyManagerBase::setPhoneState(int state)
     // change routing is necessary
     setOutputDevice(mPrimaryOutput, newDevice, force, delayMs);
 
-    //update device for all non-primary outputs
+    // update device for all non-primary outputs
     for (size_t i = 0; i < mOutputs.size(); i++) {
         audio_io_handle_t output = mOutputs.keyAt(i);
         if (output != mPrimaryOutput) {
@@ -402,6 +552,26 @@ void AudioPolicyManagerBase::setPhoneState(int state)
     } else {
         mLimitRingtoneVolume = false;
     }
+
+#ifdef SPRD_HARDWARE
+    if (state == AudioSystem::MODE_RINGTONE) {
+      for (size_t i = 0; i < mOutputs.size(); i++) {
+        for (int stream = 0; stream < AudioSystem::NUM_STREAM_TYPES; stream++) {
+          if (stream != AudioSystem::RING) {
+            setStreamMute(stream, true, mOutputs.keyAt(i));
+          }
+        }
+      }
+    } else if (oldState == AudioSystem::MODE_RINGTONE) {
+      for (size_t i = 0; i < mOutputs.size(); i++) {
+        for (int stream = 0; stream < AudioSystem::NUM_STREAM_TYPES; stream++) {
+          if (stream != AudioSystem::RING) {
+            setStreamMute(stream, false, mOutputs.keyAt(i));
+          }
+        }
+      }
+    }
+#endif
 }
 
 void AudioPolicyManagerBase::setForceUse(AudioSystem::force_use usage, AudioSystem::forced_config config)
@@ -416,6 +586,18 @@ void AudioPolicyManagerBase::setForceUse(AudioSystem::force_use usage, AudioSyst
             ALOGW("setForceUse() invalid config %d for FOR_COMMUNICATION", config);
             return;
         }
+#ifdef SPRD_HARDWARE
+        if (mAvailableOutputDevices & AUDIO_DEVICE_OUT_FM_HEADSET) {
+            if (AudioSystem::FORCE_SPEAKER == config) {
+                mAvailableOutputDevices = (audio_devices_t)(mAvailableOutputDevices | AUDIO_DEVICE_OUT_FM_SPEAKER);
+            } else {
+                mAvailableOutputDevices = (audio_devices_t)(mAvailableOutputDevices & ~AUDIO_DEVICE_OUT_FM_SPEAKER);
+            }
+            mForceUse[AudioSystem::FOR_MEDIA] = config;
+            ALOGW("setForceUse() invalid config for FOR_COMMUNICATION in the FM interface.");
+            return;
+        }
+#endif
         forceVolumeReeval = true;
         mForceUse[usage] = config;
         break;
@@ -423,18 +605,22 @@ void AudioPolicyManagerBase::setForceUse(AudioSystem::force_use usage, AudioSyst
         if (config != AudioSystem::FORCE_HEADPHONES && config != AudioSystem::FORCE_BT_A2DP &&
             config != AudioSystem::FORCE_WIRED_ACCESSORY &&
             config != AudioSystem::FORCE_ANALOG_DOCK &&
+            config != AudioSystem::FORCE_SPEAKER &&
             config != AudioSystem::FORCE_DIGITAL_DOCK && config != AudioSystem::FORCE_NONE &&
-            config != AudioSystem::FORCE_NO_BT_A2DP
-#ifdef MTK_HARDWARE
-            // FM-radio uses the media channel and the app can force the use of the speaker
-            // on-demand.
-            && config != AudioSystem::FORCE_SPEAKER
-#endif
-            ) {
+            config != AudioSystem::FORCE_NO_BT_A2DP) {
             ALOGW("setForceUse() invalid config %d for FOR_MEDIA", config);
             return;
         }
         mForceUse[usage] = config;
+#ifdef SPRD_HARDWARE
+        if (mAvailableOutputDevices & AUDIO_DEVICE_OUT_FM_HEADSET) {
+            if (AudioSystem::FORCE_SPEAKER == config) {
+                mAvailableOutputDevices = (audio_devices_t)(mAvailableOutputDevices | AUDIO_DEVICE_OUT_FM_SPEAKER);
+            } else {
+                mAvailableOutputDevices = (audio_devices_t)(mAvailableOutputDevices & ~AUDIO_DEVICE_OUT_FM_SPEAKER);
+            }
+        }
+#endif
         break;
     case AudioSystem::FOR_RECORD:
         if (config != AudioSystem::FORCE_BT_SCO && config != AudioSystem::FORCE_WIRED_ACCESSORY &&
@@ -468,6 +654,8 @@ void AudioPolicyManagerBase::setForceUse(AudioSystem::force_use usage, AudioSyst
         break;
     }
 
+    ALOGV("setForceUse() usage %d, config %d, mPhoneState %d mAvailableOutputDevices 0x%x", usage, config, mPhoneState, mAvailableOutputDevices);
+
     // check for device and output changes triggered by new force usage
     checkA2dpSuspend();
     checkOutputForAllStrategies();
@@ -1146,9 +1334,17 @@ status_t AudioPolicyManagerBase::setStreamVolumeIndex(AudioSystem::stream_type s
         audio_devices_t curDevice =
                 getDeviceForVolume(mOutputs.valueAt(i)->device());
 #ifndef ICS_AUDIO_BLOB
+#ifdef SPRD_HARDWARE
+        if ((device == AUDIO_DEVICE_OUT_DEFAULT) || (device == curDevice) ||
+                    // Modify for bug 134812
+                    (device == AUDIO_DEVICE_OUT_WIRED_HEADSET && (curDevice == AUDIO_DEVICE_OUT_FM_HEADSET || curDevice == AUDIO_DEVICE_OUT_FM_SPEAKER)))
+                    // Modify for bug 134812
+#else
         if ((device == AUDIO_DEVICE_OUT_DEFAULT) || (device == curDevice))
 #endif
+#endif
         {
+
             status_t volStatus = checkAndSetVolume(stream, index, mOutputs.keyAt(i), curDevice);
             if (volStatus != NO_ERROR) {
                 status = volStatus;
@@ -1397,7 +1593,6 @@ bool AudioPolicyManagerBase::isSourceActive(audio_source_t source) const
     return false;
 }
 
-
 status_t AudioPolicyManagerBase::dump(int fd)
 {
     const size_t SIZE = 256;
@@ -1689,6 +1884,17 @@ AudioPolicyManagerBase::AudioPolicyManagerBase(AudioPolicyClientInterface *clien
 
     updateDevicesAndOutputs();
 
+#ifdef SPRD_HARDWARE
+    //  add for bug158794 start
+    char bootvalue[PROPERTY_VALUE_MAX];
+    // prop sys.boot_completed will set 1 when system ready (ActivityManagerService.java)...
+    property_get("sys.boot_completed", bootvalue, "");
+    if (strncmp("1", bootvalue, 1) != 0) {
+        startReadingThread();
+    }
+    // add for bug158794 end
+#endif
+
 #ifdef AUDIO_POLICY_TEST
     if (mPrimaryOutput != 0) {
         AudioParameter outputCmd = AudioParameter();
@@ -2063,7 +2269,12 @@ status_t AudioPolicyManagerBase::checkOutputsForDevice(audio_devices_t device,
         for (size_t i = 0; i < mOutputs.size(); i++) {
             desc = mOutputs.valueAt(i);
             if (!desc->isDuplicated() &&
+#ifdef SPRD_HARDWARE
+                    (!(desc->mProfile->mSupportedDevices & mAvailableOutputDevices) ||
+                        ((desc->mProfile->mSupportedDevices & device) & AUDIO_DEVICE_OUT_ALL_FM))) {
+#else
                     !(desc->mProfile->mSupportedDevices & mAvailableOutputDevices)) {
+#endif
                 ALOGV("checkOutputsForDevice(): disconnecting adding output %d", mOutputs.keyAt(i));
                 outputs.add(mOutputs.keyAt(i));
             }
@@ -2336,6 +2547,10 @@ audio_devices_t AudioPolicyManagerBase::getNewDevice(audio_io_handle_t output, b
         device = getDeviceForStrategy(STRATEGY_MEDIA, fromCache);
     } else if (outputDesc->isStrategyActive(STRATEGY_DTMF)) {
         device = getDeviceForStrategy(STRATEGY_DTMF, fromCache);
+#ifdef SPRD_HARDWARE
+    } else if (outputDesc->isStrategyActive(STRATEGY_FM)) {
+        device = getDeviceForStrategy(STRATEGY_FM, fromCache);
+#endif
     }
 
     ALOGV("getNewDevice() selected device %x", device);
@@ -2387,6 +2602,10 @@ AudioPolicyManagerBase::routing_strategy AudioPolicyManagerBase::getStrategy(
         return STRATEGY_MEDIA;
     case AudioSystem::ENFORCED_AUDIBLE:
         return STRATEGY_ENFORCED_AUDIBLE;
+#ifdef SPRD_HARDWARE
+    case AudioSystem::FM:
+        return STRATEGY_FM;
+#endif
     }
 }
 
@@ -2535,6 +2754,11 @@ audio_devices_t AudioPolicyManagerBase::getDeviceForStrategy(routing_strategy st
         // FALL THROUGH
 
     case STRATEGY_ENFORCED_AUDIBLE:
+        //Fix bug 137934. Note we can delete routing policy in STRATEGY_SONIFICATION
+        if (isInCall()) {
+            device = getDeviceForStrategy(STRATEGY_PHONE, false /*fromCache*/);
+            break;
+        }
         // strategy STRATEGY_ENFORCED_AUDIBLE uses same routing policy as STRATEGY_SONIFICATION
         // except:
         //   - when in call where it doesn't default to STRATEGY_PHONE behavior
@@ -2556,6 +2780,17 @@ audio_devices_t AudioPolicyManagerBase::getDeviceForStrategy(routing_strategy st
             // no sonification on remote submix (e.g. WFD)
             device2 = mAvailableOutputDevices & AUDIO_DEVICE_OUT_REMOTE_SUBMIX;
         }
+#ifdef SPRD_HARDWARE
+        if (strategy == STRATEGY_MEDIA) {
+            switch (mForceUse[AudioSystem::FOR_MEDIA]) {
+            case AudioSystem::FORCE_SPEAKER:
+                ALOGD("geting device of force_speaker");
+                if (device2 == AUDIO_DEVICE_NONE) {
+                    device2 = mAvailableOutputDevices & AUDIO_DEVICE_OUT_SPEAKER;
+                }
+            }
+        }
+#endif
         if ((device2 == AUDIO_DEVICE_NONE) &&
                 mHasA2dp && (mForceUse[AudioSystem::FOR_MEDIA] != AudioSystem::FORCE_NO_BT_A2DP) &&
                 (getA2dpOutput() != 0) && !mA2dpSuspended) {
@@ -2611,13 +2846,32 @@ audio_devices_t AudioPolicyManagerBase::getDeviceForStrategy(routing_strategy st
             ALOGE("getDeviceForStrategy() no device found for STRATEGY_MEDIA");
         }
         } break;
+#ifdef SPRD_HARDWARE
+    case STRATEGY_FM: {
+        switch (mForceUse[AudioSystem::FOR_MEDIA]) {
+        case AudioSystem::FORCE_SPEAKER: {
+            ALOGD("STRATEGY_FM: geting device of force_speaker");
+            if (device == AUDIO_DEVICE_NONE) {
+                device = mAvailableOutputDevices & AUDIO_DEVICE_OUT_FM_SPEAKER;
+            }
+            } break;
+        default: {
+            ALOGD("STRATEGY_FM: device is not fm speaker");
+            } break;
+        }
+
+        if (device == AUDIO_DEVICE_NONE) {
+            device = mAvailableOutputDevices & AUDIO_DEVICE_OUT_FM_HEADSET;
+        }
 
+        } break;
+#endif
     default:
         ALOGW("getDeviceForStrategy() unknown strategy: %d", strategy);
         break;
     }
 
-    ALOGVV("getDeviceForStrategy() strategy %d, device %x", strategy, device);
+    ALOGV("getDeviceForStrategy() strategy %d, device %x", strategy, device);
     return device;
 }
 
@@ -2675,8 +2929,13 @@ uint32_t AudioPolicyManagerBase::checkDeviceMuteStrategies(AudioOutputDescriptor
                     // do tempMute only for current output
                     if (tempMute && (desc == outputDesc)) {
                         setStrategyMute((routing_strategy)i, true, curOutput);
-                        setStrategyMute((routing_strategy)i, false, curOutput,
+                        if (mute) {
+                            setStrategyMute((routing_strategy)i, false, curOutput,
+                                            desc->latency() * 2 * 2, device);
+                        } else {
+                            setStrategyMute((routing_strategy)i, false, curOutput,
                                             desc->latency() * 2, device);
+                        }
                     }
                     if ((tempMute && (desc == outputDesc)) || mute) {
                         if (muteWaitMs < desc->latency()) {
@@ -2713,7 +2972,25 @@ uint32_t AudioPolicyManagerBase::setOutputDevice(audio_io_handle_t output,
     ALOGV("setOutputDevice() output %d device %04x delayMs %d", output, device, delayMs);
     AudioOutputDescriptor *outputDesc = mOutputs.valueFor(output);
     AudioParameter param;
-    uint32_t muteWaitMs;
+    uint32_t muteWaitMs = 0;
+
+#ifdef SPRD_HARDWARE
+    /* SPRD: fix FM relate bug that key sound interrupt fm. */
+    AudioOutputDescriptor *hwOutputDesc = mOutputs.valueFor(mPrimaryOutput);
+    if (hwOutputDesc != NULL && outputDesc->mRefCount[AudioSystem::NOTIFICATION] < 1) {
+        if(hwOutputDesc->isStrategyActive(STRATEGY_FM)) {
+            audio_devices_t olddevice = device;
+            if(mAvailableOutputDevices & AUDIO_DEVICE_OUT_FM_HEADSET) {
+                device = AUDIO_DEVICE_OUT_FM_HEADSET;
+            }
+
+            if(mAvailableOutputDevices & AUDIO_DEVICE_OUT_FM_SPEAKER) {
+                device = AUDIO_DEVICE_OUT_FM_SPEAKER;
+            }
+            ALOGV("setOutputDevice(): SPRD: change device from %04x to %04x", olddevice, device);
+        }
+    }
+#endif
 
     if (outputDesc->isDuplicated()) {
         muteWaitMs = setOutputDevice(outputDesc->mOutput1->mId, device, force, delayMs);
@@ -2732,12 +3009,12 @@ uint32_t AudioPolicyManagerBase::setOutputDevice(audio_io_handle_t output,
 
     audio_devices_t prevDevice = outputDesc->mDevice;
 
-    ALOGV("setOutputDevice() prevDevice %04x", prevDevice);
+    ALOGV("setOutputDevice() prevDevice %04x, device %04x", prevDevice, device);
 
     // Device Routing has not been triggered in the following scenario:
     // Start playback on HDMI/USB hs, pause it, unplug and plug HDMI
-    //cable/usb hs, resume playback, music starts on speaker. To avoid
-    //this, update mDevice even if device is 0 which triggers routing when
+    // cable/usb hs, resume playback, music starts on speaker. To avoid
+    // this, update mDevice even if device is 0 which triggers routing when
     // HDMI cable/usb hs is reconnected
     if (device != AUDIO_DEVICE_NONE ||
         prevDevice == AUDIO_DEVICE_OUT_AUX_DIGITAL ||
@@ -2752,9 +3029,25 @@ uint32_t AudioPolicyManagerBase::setOutputDevice(audio_io_handle_t output,
     // Doing this check here allows the caller to call setOutputDevice() without conditions
     if ((device == AUDIO_DEVICE_NONE || device == prevDevice) && !force) {
         ALOGV("setOutputDevice() setting same device %04x or null device for output %d", device, output);
+#ifndef SPRD_HARDWARE
         return muteWaitMs;
+#else
+        //fm still make sound when turned to "null" in menu setting.
+        if (force && ((prevDevice & AUDIO_DEVICE_OUT_FM_HEADSET) || (prevDevice & AUDIO_DEVICE_OUT_FM_SPEAKER))) {
+            device = AUDIO_DEVICE_OUT_WIRED_HEADSET;
+        } else {
+            return muteWaitMs;
+        }
+#endif
     }
-
+#ifdef SPRD_HARDWARE
+    if (device != AUDIO_DEVICE_NONE) {
+        outputDesc->mDevice = device;
+    }
+    //Modify for bug 138480 start
+    muteWaitMs = checkDeviceMuteStrategies(outputDesc, prevDevice, delayMs);
+    //Modify for bug 138480 end
+#endif
     ALOGD("setOutputDevice() changing device from (%d) to (%d) \
         force (%d) delayMs (%d) on Output (%d)", prevDevice, device, force, delayMs, output);
     // do the routing
@@ -3179,6 +3472,12 @@ status_t AudioPolicyManagerBase::checkAndSetVolume(int stream,
                                                    int delayMs,
                                                    bool force)
 {
+#ifdef SPRD_HARDWARE
+    if (stream == AudioSystem::FM) {
+        ALOGVV("checkAndSetVolume() stream %d", stream);
+        return NO_ERROR;
+    }
+#endif
 
     // do not change actual stream volume if the stream is muted
     if (mOutputs.valueFor(output)->mMuteCount[stream] != 0) {
@@ -3787,6 +4086,11 @@ const struct StringToEnum sDeviceNameToEnumTable[] = {
     STRING_TO_ENUM(AUDIO_DEVICE_OUT_PROXY),
 #endif
     STRING_TO_ENUM(AUDIO_DEVICE_OUT_REMOTE_SUBMIX),
+#ifdef SPRD_HARDWARE
+    STRING_TO_ENUM(AUDIO_DEVICE_OUT_FM_SPEAKER),
+    STRING_TO_ENUM(AUDIO_DEVICE_OUT_FM_HEADSET),
+    STRING_TO_ENUM(AUDIO_DEVICE_OUT_ALL_FM),
+#endif
     STRING_TO_ENUM(AUDIO_DEVICE_IN_BUILTIN_MIC),
     STRING_TO_ENUM(AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET),
     STRING_TO_ENUM(AUDIO_DEVICE_IN_WIRED_HEADSET),
diff --git a/include/hardware_legacy/AudioPolicyManagerBase.h b/include/hardware_legacy/AudioPolicyManagerBase.h
index 5ba09f1..c093bf5 100644
--- a/include/hardware_legacy/AudioPolicyManagerBase.h
+++ b/include/hardware_legacy/AudioPolicyManagerBase.h
@@ -48,7 +48,7 @@ namespace android_audio_legacy {
 #define SONIFICATION_RESPECTFUL_AFTER_MUSIC_DELAY 5000
 // Time in milliseconds during witch some streams are muted while the audio path
 // is switched
-#define MUTE_TIME_MS 500
+#define MUTE_TIME_MS 2000
 
 #define NUM_TEST_OUTPUTS 5
 
@@ -159,6 +159,9 @@ protected:
             STRATEGY_SONIFICATION_RESPECTFUL,
             STRATEGY_DTMF,
             STRATEGY_ENFORCED_AUDIBLE,
+#ifdef SPRD_HARDWARE
+            STRATEGY_FM,
+#endif
             NUM_STRATEGIES
         };
 
@@ -554,6 +557,15 @@ protected:
         bool mHasA2dp; // true on platforms with support for bluetooth A2DP
         bool mHasUsb; // true on platforms with support for USB audio
         bool mHasRemoteSubmix; // true on platforms with support for remote presentation of a submix
+#ifdef SPRD_HARDWARE
+        volatile bool   mDone;
+        pthread_t mThread;
+        bool mHasStartupSound;
+        status_t startReadingThread();
+        void stopReadingThread();
+        static void *ThreadWrapper(void *me);
+        void threadFunc();
+#endif
         audio_devices_t mAttachedOutputDevices; // output devices always available on the platform
         audio_devices_t mDefaultOutputDevice; // output device selected by default at boot time
                                               // (must be in mAttachedOutputDevices)
diff --git a/include/hardware_legacy/AudioSystemLegacy.h b/include/hardware_legacy/AudioSystemLegacy.h
index 0959818..d5de90a 100644
--- a/include/hardware_legacy/AudioSystemLegacy.h
+++ b/include/hardware_legacy/AudioSystemLegacy.h
@@ -95,6 +95,9 @@ public:
         ENFORCED_AUDIBLE = 7, // Sounds that cannot be muted by user and must be routed to speaker
         DTMF             = 8,
         TTS              = 9,
+#ifdef SPRD_HARDWARE
+        FM               = 10,
+#endif
 #ifdef QCOM_HARDWARE
         INCALL_MUSIC     = 10,
 #endif
@@ -260,6 +263,10 @@ public:
         DEVICE_OUT_AUX_DIGITAL = 0x400,
         DEVICE_OUT_ANLG_DOCK_HEADSET = 0x800,
         DEVICE_OUT_DGTL_DOCK_HEADSET = 0x1000,
+#ifdef SPRD_HARDWARE
+        DEVICE_OUT_FM_HEADSET = 0x1000000,
+        DEVICE_OUT_FM_SPEAKER = 0x2000000,
+#endif
 #ifdef QCOM_HARDWARE
         DEVICE_OUT_USB_ACCESSORY = 0x2000,
         DEVICE_OUT_USB_DEVICE = 0x4000,
@@ -277,6 +284,9 @@ public:
                 DEVICE_OUT_BLUETOOTH_SCO_CARKIT | DEVICE_OUT_BLUETOOTH_A2DP | DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES |
                 DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER | DEVICE_OUT_AUX_DIGITAL |
                 DEVICE_OUT_ANLG_DOCK_HEADSET | DEVICE_OUT_DGTL_DOCK_HEADSET |
+#if defined(SPRD_HARDWARE)
+                DEVICE_OUT_FM_HEADSET | DEVICE_OUT_FM_SPEAKER |
+#endif
 #ifdef QCOM_HARDWARE
                 DEVICE_OUT_USB_ACCESSORY | DEVICE_OUT_USB_DEVICE |
                 DEVICE_OUT_ANC_HEADSET | DEVICE_OUT_ANC_HEADPHONE |
@@ -287,6 +297,9 @@ public:
 #endif
         DEVICE_OUT_ALL_A2DP = (DEVICE_OUT_BLUETOOTH_A2DP | DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES |
                 DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER),
+#ifdef SPRD_HARDWARE
+        DEVICE_OUT_ALL_FM = (DEVICE_OUT_FM_HEADSET | DEVICE_OUT_FM_SPEAKER),
+#endif
 #ifdef QCOM_HARDWARE
         DEVICE_OUT_ALL_USB = (DEVICE_OUT_USB_ACCESSORY | DEVICE_OUT_USB_DEVICE),
 #endif
